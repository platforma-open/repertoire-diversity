// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
ll := import("@platforma-sdk/workflow-tengo:ll")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
canonical := import("@platforma-sdk/workflow-tengo:canonical")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
maps := import("@platforma-sdk/workflow-tengo:maps")
json := import("json")
text := import("text")

diversitySw := assets.importSoftware("@platforma-open/milaboratories.repertoire-diversity-2.software:main")

getLabel := func(mt) {
	if mt == "chao1" {
		return "Chao1 Estimate"
	} else if mt == "d50" {
		return "D50 Diversity"
	} else if mt == "efronThisted" {
		return "Efron-Thisted Estimate"
	} else if mt == "observed" {
		return "Observed Diversity"
	} else if mt == "shannonWienerIndex" {
		return "Shannon-Wiener Index"
	} else if mt == "shannonWiener" {
		return "Shannon-Wiener Diversity"
	} else if mt == "normalizedShannonWiener" {
		return "Normalized Shannon-Wiener Index"
	} else if mt == "inverseSimpson" {
		return "Inverse Simpson Index"
	} else if mt == "gini" {
		return "Gini Index"
	}
	return mt;
}

getSpecs := func(abundanceSpec, metrics) {
	columns := []

	for index, metric in metrics {
		spec := {
			column: "d-" + string(index),
			spec: {
					name: "pl7.app/diversity",
					valueType: "Double",
					domain: maps.merge(
						abundanceSpec.domain,
						{
							"pl7.app/diversity/type": metric.type,
							"pl7.app/downsampling": canonical.encode(metric.downsampling)
						}
					),
					annotations: {
						"pl7.app/label": getLabel(metric.type),
						"pl7.app/format": ".2f"
					}
				}
		}
		columns = append(columns, spec)
	}

	return {
		axes: [
			{
				column: "sampleId",
				spec: abundanceSpec.axesSpec[0]
			}
		], 
		columns: columns,
		storageFormat: "Binary",
		partitionKeyLength: 0
	}
}

wf.prepare(func(args) {
	bundleBuilder := wf.createPBundleBuilder()
	bundleBuilder.addAnchor("main", args.abundanceRef)
	return  { 
		columns: bundleBuilder.build()
	}
})

wf.body(func(args) {
	blockId := wf.blockId().getDataAsJson()

	columns := args.columns
	abundanceSpec := columns.getSpec(args.abundanceRef)
	table := pframes.tsvFileBuilder()

	table.setAxisHeader("pl7.app/sampleId", "sampleId")
	table.add(columns.getColumn(args.abundanceRef), {header: "count"})
	table.mem("16GiB")
	table.cpu(1)
	tsv := table.build()

	runDiversity := exec.builder().
		software(diversitySw).
		mem("16GiB").
		cpu(1).
		writeFile("metrics.json", json.encode(args.metrics)).
		addFile("input.tsv", tsv).
		saveFile("result.tsv").
		run()

	result := xsv.importFile(
		runDiversity.getFile("result.tsv"),
		"tsv",
		getSpecs(abundanceSpec, args.metrics),
		{ splitDataAndSpec: true, cpu: 1, mem: "32GiB" }
	)

	pf := pframes.pFrameBuilder()
	for id, v in result {
		// Find the corresponding metric for this column
		columnIndex := 0
		if id != "sampleId" {
			// Extract index from column name like "d-0", "d-1", etc.
			columnIndex = int(id[2:]) // Remove "d-" prefix and convert to int
		}
		
		// Create individual trace for each metric
		if columnIndex < len(args.metrics) {
			metric := args.metrics[columnIndex]
			downsampling := metric.downsampling
			
			downsamplingLabel := ""
			if downsampling.type == "hypergeometric" {
				if downsampling.valueChooser == "fixed" {
					downsamplingLabel = "Repertoire Diversity (" + downsampling.type + " - " + downsampling.valueChooser + " - " + string(downsampling.n) + ")"
				} else {
					downsamplingLabel = "Repertoire Diversity (" + downsampling.type + " - " + downsampling.valueChooser + ")"
				}
			} else {
				downsamplingLabel = "Repertoire Diversity (" + downsampling.type + ")"
			}
			
			trace := pSpec.makeTrace(
				abundanceSpec,
				{
					type: "milaboratories.differential-repertoire-diversity",
					id: blockId,
					importance: 50, 
					label: downsamplingLabel
				}
			)
			
			pf.add(id, trace.inject(v.spec), v.data)
		}
	}
	pf = pf.build()

	return {
		outputs: {
			pf: pframes.exportFrame(pf)
		},

		exports: {
			pf: pf
		}
	}
})

